# -*- coding: utf-8 -*-
"""bigInt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15JzHOJcJe8zpLZbgBK0Fe3vJoZ-OUXeO
"""

import numpy as np
import numba as nb
from numba import uint32,njit
from numba.experimental import jitclass

maxInt = np.uint32(4294967295)
@jitclass([
    ('arrSize', uint32),               # a simple scalar field
    ('array', uint32[:]),          # an array field
])
class BigInt:
    def __init__(self):
        self.arrSize = 0
        self.array = np.zeros(32, dtype=np.uint32)

    def storeArr(self, arr):
        self.arrSize = arr.shape[0]
        for i in range(self.arrSize):
            self.array[i] = arr[i]

    def add(x, y, res):
        carry = 0
        for i in range(min(x.arrSize,y.arrSize)):
            res.array[i] = y.array[i]+x.array[i]+carry
            if res.array[i]<x.array[i] or res.array[i]<y.array[i]:  #overflow
                carry = 1
            else:
                carry = 0

        if x.arrSize>y.arrSize:
            for i in range(y.arrSize,x.arrSize):
                res.array[i] = x.array[i] + carry
                carry = 1 if res.array[i]==0 else 0
            res.array[x.arrSize] = carry
            res.arrSize = x.arrSize + carry
        else:
            for i in range(x.arrSize,y.arrSize):
                res.array[i] = y.array[i] + carry
                carry = 1 if res.array[i]==0 else 0
            res.array[y.arrSize] = carry
            res.arrSize = y.arrSize + carry

        for i in range(max(x.arrSize,y.arrSize)+carry,32):
            res.array[i]=0


    def subtract(x, y, res):
        borrow = 0
        sz = x.arrSize if x.arrSize>=y.arrSize else 32
        for i in range(sz):
            if (borrow==0 or x.array[i]>0) and x.array[i]-borrow>=y.array[i]:
                res.array[i] = (x.array[i]-borrow)-y.array[i]
                borrow = 0
            else:
                res.array[i] = x.array[i]+(maxInt-y.array[i])+(1-borrow)
                borrow = 1

        for i in range(sz,32):
            res.array[i] = maxInt*borrow

        return borrow

# a = BigInt()
# b = BigInt()
# c = BigInt()
# a1 = np.array((maxInt,maxInt,maxInt))
# b1 = np.array((10,10,10))
# a.storeArr(a1)
# b.storeArr(b1)

# BigInt.add(a,b,c)
# %timeit BigInt.add(a,b,c)
# print(np.flip(c.array))

# borrow = BigInt.subtract(b,a,c)
# %timeit BigInt.subtract(b,a,c)
# print(borrow, np.flip(c.array))

