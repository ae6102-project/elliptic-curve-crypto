# %%
import numpy as np
from numba import njit

# %%
# Define the curve parameters
p = 2**521 - 1
a = np.array([-3], dtype=np.uint64)
b = np.array([1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984], dtype=np.uint64)
Gx = np.array([0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66], dtype=np.uint64)
Gy = np.array([0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650], dtype=np.uint64)

# %%
# Define a function to perform point addition
@njit(parallel=True)
def point_addition(P, Q):
    x1, y1 = P
    x2, y2 = Q
    if np.array_equal(P, Q):
        m = (3 * x1**2 + a) * pow(2 * y1, p-2,p)
        x3 = m**2 - x1 - x2
        y3 = m*(x1 - x3) - y2
    else:
        m = (3*x1**2+a) * pow(2 * y1, p-2,p)
        x3 = m**2 - 2*x1
        y3 = y1 + m*(x3 - x1)
    return np.array([x3, y3], dtype=np.uint64)


# %%
# Define a function to perform scalar multiplication on the curve
@njit(parallel=True)
def scalar_multiplication(k, P):
    Q = np.array([0, 0], dtype=np.uint64)
    while k > 0:
        if k % 2 == 1:
            Q = point_addition(Q, P)
        P = point_addition(P, P)
        k //= 2
    return Q


# %%
# (3765694707205160443156935143048631724731498503877420629884262480811047428133763020658916786481873635545376551801957967672812492670106190771852315926785422315 : 2933914032084564948685685215624992998488752908623657593539041363755919066348426131861163830056637633441485462064358983121894399076432020706664208664708215781 : 1)

# (211636311576500500730031034800370673749432722121874693559197603353940963269637169904737797813410516888106225907239173258907189282345394175522755482674523344 : 3556079056200961771851736584311393752485005672043176708010501816440768822530449495074752687993776140225486641427568101830358859288908276107977398863089155520 : 1)

Ax = np.array([3765694707205160443156935143048631724731498503877420629884262480811047428133763020658916786481873635545376551801957967672812492670106190771852315926785422315], dtype=np.uint64)
Ay = np.array([2933914032084564948685685215624992998488752908623657593539041363755919066348426131861163830056637633441485462064358983121894399076432020706664208664708215781], dtype=np.uint64)

Bx = np.array([211636311576500500730031034800370673749432722121874693559197603353940963269637169904737797813410516888106225907239173258907189282345394175522755482674523344], dtype=np.uint64)

By = np.array([3556079056200961771851736584311393752485005672043176708010501816440768822530449495074752687993776140225486641427568101830358859288908276107977398863089155520], dtype=np.uint64)
A = np.array([Ax, Ay], dtype=np.uint64)
B = np.array([Bx, By], dtype=np.uint64)
point_addition(A,B)


